{"name": "test_login_002", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@placeholder='Username']\"}\n  (Session info: chrome=115.0.5790.111); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0053A813+48355]\n\t(No symbol) [0x004CC4B1]\n\t(No symbol) [0x003D5358]\n\t(No symbol) [0x004009A5]\n\t(No symbol) [0x00400B3B]\n\t(No symbol) [0x0042E232]\n\t(No symbol) [0x0041A784]\n\t(No symbol) [0x0042C922]\n\t(No symbol) [0x0041A536]\n\t(No symbol) [0x003F82DC]\n\t(No symbol) [0x003F93DD]\n\tGetHandleVerifier [0x0079AABD+2539405]\n\tGetHandleVerifier [0x007DA78F+2800735]\n\tGetHandleVerifier [0x007D456C+2775612]\n\tGetHandleVerifier [0x005C51E0+616112]\n\t(No symbol) [0x004D5F8C]\n\t(No symbol) [0x004D2328]\n\t(No symbol) [0x004D240B]\n\t(No symbol) [0x004C4FF7]\n\tBaseThreadInitThunk [0x76397D59+25]\n\tRtlInitializeExceptionChain [0x773CB79B+107]\n\tRtlClearBits [0x773CB71F+191]", "trace": "self = <testCases.test_Login.Test_Login object at 0x00000234BEA2B010>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"70d75b485d0687b0f18bb4e4b8a853f2\")>\n\n    def test_login_002(self, setup):\n        self.driver = setup\n        self.lp = OrangeHRM_Login(self.driver)\n>       self.lp.Enter_Username(\"Admin\")\n\ntestCases\\test_Login.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\LoginPage.py:16: in Enter_Username\n    self.driver.find_element(*OrangeHRM_Login.Text_Username_XPATH).send_keys(username)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000234BEA4C2D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x76397D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x773CB79B+107]\\\\n\\\\tRtlClearBits [0x773CB71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@placeholder='Username']\"}\nE         (Session info: chrome=115.0.5790.111); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0053A813+48355]\nE       \t(No symbol) [0x004CC4B1]\nE       \t(No symbol) [0x003D5358]\nE       \t(No symbol) [0x004009A5]\nE       \t(No symbol) [0x00400B3B]\nE       \t(No symbol) [0x0042E232]\nE       \t(No symbol) [0x0041A784]\nE       \t(No symbol) [0x0042C922]\nE       \t(No symbol) [0x0041A536]\nE       \t(No symbol) [0x003F82DC]\nE       \t(No symbol) [0x003F93DD]\nE       \tGetHandleVerifier [0x0079AABD+2539405]\nE       \tGetHandleVerifier [0x007DA78F+2800735]\nE       \tGetHandleVerifier [0x007D456C+2775612]\nE       \tGetHandleVerifier [0x005C51E0+616112]\nE       \t(No symbol) [0x004D5F8C]\nE       \t(No symbol) [0x004D2328]\nE       \t(No symbol) [0x004D240B]\nE       \t(No symbol) [0x004C4FF7]\nE       \tBaseThreadInitThunk [0x76397D59+25]\nE       \tRtlInitializeExceptionChain [0x773CB79B+107]\nE       \tRtlClearBits [0x773CB71F+191]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "attachments": [{"name": "log", "source": "58abc89f-8204-4514-bb45-6961bf0e31c4-attachment.txt", "type": "text/plain"}], "start": 1691566390077, "stop": 1691566390097, "uuid": "a19c6039-6a8e-45da-b543-4b42f020c038", "historyId": "99f8958a92a829658f144d68effc6c93", "testCaseId": "99f8958a92a829658f144d68effc6c93", "fullName": "testCases.test_Login.Test_Login#test_login_002", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Login"}, {"name": "subSuite", "value": "Test_Login"}, {"name": "host", "value": "VARSHA"}, {"name": "thread", "value": "9348-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Login"}]}